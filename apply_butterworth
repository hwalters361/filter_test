#!/usr/bin/env python
"""
A command line program that takes in an audio file and applies a butterworth highpass or lowpass filter.
Example usage:
./apply_butterworth everyone_knows.wav lowpass 440
    
./apply_butterworth filtered.wav highpass 500
"""
import numpy as np
import scipy.io.wavfile as wavfile
import scipy.signal as signal
import matplotlib.pyplot as plt
import argparse

def apply_filter(audio, filter_type, cutoff_freq, sample_rate):
    # Function to apply filters
    if filter_type == 'lowpass':
        b, a = signal.butter(5, cutoff_freq / (sample_rate / 2), 'low')
    elif filter_type == 'highpass':
        b, a = signal.butter(5, cutoff_freq / (sample_rate / 2), 'high')
    else:
        raise ValueError("Filter type not supported")
    
    return signal.lfilter(b, a, audio)

def process_audio(filepath, filter_type, cutoff_frequency):
    
    # Load audio file
    sample_rate, audio_data = wavfile.read(filepath)
    cutoff_frequency = int(cutoff_frequency)
    # Apply filter
    filtered_audio = apply_filter(audio_data[:, 0], filter_type, cutoff_frequency, sample_rate)

    # Save filtered audio to a new WAV file
    filtered_filename = f'filtered_{filter_type}_{cutoff_frequency}.wav'
    wavfile.write(filtered_filename, sample_rate, np.int16(filtered_audio))
    print(f'Generated output audio file: {filtered_filename}')

    # Calculate spectrum before and after filtering
    frequencies, spectrum_before = signal.periodogram(audio_data[:, 0], sample_rate)
    frequencies, spectrum_after = signal.periodogram(filtered_audio, sample_rate)

    # Plot the spectra
    plt.figure(figsize=(10, 6))

    plt.subplot(2, 1, 1)
    plt.semilogy(frequencies, spectrum_before)
    plt.title('Original Audio Spectrum')
    plt.xlabel('Frequency (Hz)')
    plt.ylabel('Amplitude (log scale)')

    plt.subplot(2, 1, 2)
    plt.semilogy(frequencies, spectrum_after)
    plt.title(f'Filtered Audio Spectrum, {filter_type} at {cutoff_frequency} Hz')
    plt.xlabel('Frequency (Hz)')
    plt.ylabel('Amplitude (log scale)')

    plt.tight_layout()
    plt.show()

def main():
    parser = argparse.ArgumentParser(
        prog='MostActiveCookie',
        description='Finds the most active cookie from a csv log of cookies',
        usage='%(prog)s filename [-h] [-t FILTERTYPE] [-q FREQUENCY]'
    )
    parser.add_argument('filename')
    parser.add_argument('filterType') # highpass or lowpass
    parser.add_argument('frequency') # in Hz
    args = parser.parse_args()
    
    file_path = args.filename
    filter_type = args.filterType
    frequency = args.frequency
    
    process_audio(file_path,filter_type, frequency)
    
    return

if __name__ == "__main__":
    main()
